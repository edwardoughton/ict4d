myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10000,]
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
View(data)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
data = data[data$frequency_GHz != 1.8 & data$frequency_GHz != 3.7 ,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
#subset the data for plotting
data = select(data, environment, frequency_GHz, ant_type, r_distance, spectral_efficiency_bps_hz, capacity_mbps, capacity_mbps_km2)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency vs User Distance', x = NULL, y='Spectral Efficiency (Bps/Hz)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_capacity = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Channel Capacity vs User Distance', x = NULL, y='Capacity (Mbps)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_capacity_km2 = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps_km2, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Area Capacity vs User Distance', x = "Distance (km)", y='Capacity (Mbps/km^2)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
panel = ggarrange(pysim5g_plot_se, pysim5g_plot_capacity, pysim5g_plot_capacity_km2,
common.legend = TRUE, legend = 'bottom', ncol = 1, nrow = 3)
path = file.path(folder, 'figures', 'pysim5g_panel.png', dpi=300)
ggsave(path, units="in", width=8, height=10)
print(panel)
dev.off()
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency vs User Distance', x = NULL, y='Spectral Efficiency (Bps/Hz)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_capacity = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Channel Capacity vs User Distance', x = NULL, y='Capacity (Mbps)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_capacity_km2 = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps_km2, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Area Capacity vs User Distance', x = "Distance (km)", y='Capacity (Mbps/km^2)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
panel = ggarrange(pysim5g_plot_se, pysim5g_plot_capacity, pysim5g_plot_capacity_km2,
common.legend = TRUE, legend = 'bottom', ncol = 1, nrow = 3)
path = file.path(folder, 'figures', 'pysim5g_panel.png', dpi=300)
ggsave(path, units="in", width=8, height=10)
library(ggpubr)
library(plyr)
###plot pysim5g lookup tables
# install.packages("tidyverse")
library(tidyverse)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
data = data[data$frequency_GHz != 1.8 & data$frequency_GHz != 3.7 ,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
#subset the data for plotting
data = select(data, environment, frequency_GHz, ant_type, r_distance, spectral_efficiency_bps_hz, capacity_mbps, capacity_mbps_km2)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency vs User Distance', x = NULL, y='Spectral Efficiency (Bps/Hz)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_capacity = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Channel Capacity vs User Distance', x = NULL, y='Capacity (Mbps)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_capacity_km2 = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps_km2, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Area Capacity vs User Distance', x = "Distance (km)", y='Capacity (Mbps/km^2)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
panel = ggarrange(pysim5g_plot_se, pysim5g_plot_capacity, pysim5g_plot_capacity_km2,
common.legend = TRUE, legend = 'bottom', ncol = 1, nrow = 3)
path = file.path(folder, 'figures', 'pysim5g_panel.png', dpi=300)
ggsave(path, units="in", width=8, height=10)
print(panel)
dev.off()
ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency vs User Distance', x = NULL, y='Spectral Efficiency (Bps/Hz)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
data = data[data$frequency_GHz != 1.8 & data$frequency_GHz != 3.7 ,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
View(data)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
View(data)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 5800,]
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
unique(data$inter_site_distance_m)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 4800,]
data = data[data$frequency_GHz != 1.8 & data$frequency_GHz != 3.7 ,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
#subset the data for plotting
data = select(data, environment, frequency_GHz, ant_type, r_distance, spectral_efficiency_bps_hz, capacity_mbps, capacity_mbps_km2)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency vs User Distance', x = NULL, y='Spectral Efficiency (Bps/Hz)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_capacity = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Channel Capacity vs User Distance', x = NULL, y='Capacity (Mbps)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
pysim5g_plot_capacity_km2 = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps_km2, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Area Capacity vs User Distance', x = "Distance (km)", y='Capacity (Mbps/km^2)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
panel = ggarrange(pysim5g_plot_se, pysim5g_plot_capacity, pysim5g_plot_capacity_km2,
common.legend = TRUE, legend = 'bottom', ncol = 1, nrow = 3)
path = file.path(folder, 'figures', 'pysim5g_panel.png', dpi=300)
ggsave(path, units="in", width=8, height=10)
print(panel)
dev.off()
ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency vs User Distance', x = NULL, y='Spectral Efficiency (Bps/Hz)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
ggplot(data, aes(x=r_distance/1000, y=capacity_mbps, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Channel Capacity vs User Distance', x = NULL, y='Capacity (Mbps)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
ggplot(data, aes(x=r_distance/1000, y=capacity_mbps_km2, colour=factor(frequency_GHz))) +
geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Area Capacity vs User Distance', x = "Distance (km)", y='Capacity (Mbps/km^2)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
ggarrange(pysim5g_plot_se, pysim5g_plot_capacity, pysim5g_plot_capacity_km2,
common.legend = TRUE, legend = 'bottom', ncol = 1, nrow = 3)
path = file.path(folder, 'figures', 'pysim5g_panel.png', dpi=300)
source('D:/Github/podis/vis/vis2.r', echo=TRUE)
file.path(folder, 'figures', 'pysim5g_panel.png', dpi=300)
path = file.path(folder, 'figures', 'pysim5g_panel.png')
ggsave(path, units="in", width=8, height=10)
print(panel)
dev.off()
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/podis/vis/panel_plots.r', echo=TRUE)
source('D:/Github/podis/vis/panel_plots.r', echo=TRUE)
###VISUALISE MODEL OUTPUTS###
library(tidyverse)
library(ggpubr)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
folder_inputs = file.path(folder, 'subscriptions', "data_inputs")
files = list.files(path=folder_inputs, pattern="*.csv")
data <-
do.call("rbind",
lapply(files,
function(x)
read.csv(file.path(folder_inputs, x),
stringsAsFactors = FALSE)))
data$country = factor(data$country, levels=c("CIV",
'MLI',
"SEN",
"KEN",
"TZA",
"UGA"),
labels=c("Cote D'Ivoire",
"Mali",
"Senegal",
"Kenya",
"Tanzania",
"Uganda"
))
data$scenario = factor(data$scenario, levels=c("low",
'baseline',
"high"
),
labels=c("Low",
"Baseline",
"High"
))
data = data[complete.cases(data),]
subscriptions = ggplot(data, aes(x=year, y=penetration, group=country)) +
geom_point(aes(shape=country, color=country), size=1) +
geom_line(aes(color=country)) +
scale_shape_manual(values=c(0, 1, 2, 3, 4, 5)) +
scale_size_manual(values=c(0.1, 0.1, 0.1, 0.1, 0.1)) +
scale_color_manual(values=c("#009E73", "#F0E442","#E69F00", "#56B4E9","#D55E00", "#0072B2")) +
geom_vline(xintercept=2020, linetype="dashed", color = "grey", size=.5) +
scale_x_continuous(expand = c(0, 0.5), limits = c(2010,2030),
breaks = seq(2010,2030,2)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom", legend.title=element_blank()) +
labs(title = "(A) Mobile Subscriptions by Country",
x = NULL, y = "Subscribers (%)") +
guides(shape=guide_legend(ncol=6), colour=guide_legend(ncol=6)) +
facet_grid(~scenario)
####################smartphones
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
data <- read.csv(file.path(folder, '..', 'results', 'regional_annual_demand_technology_options.csv'))
data <- data[(data$confidence == 50),]
names(data)[names(data) == 'GID_0'] <- 'country'
data = data[(
data$strategy == '4G_epc_wireless_baseline_baseline_baseline_baseline_baseline'
),]
data <- select(data, country, scenario, geotype, year,
population, population_with_smartphones)
data$geotype[data$geotype == 'suburban'] <- 'urban'
data = data %>%
group_by(country, scenario, geotype, year) %>%
summarize(population = sum(population),
smartphones = sum(population_with_smartphones))
data$geotype = factor(data$geotype,
levels=c("urban",
"rural"),
labels=c("Urban",
"Rural"))
data$scenario = factor(data$scenario,
levels=c("low_10_10_10",
"baseline_10_10_10",
"high_10_10_10"),
labels=c("Low",
"Baseline",
"High"))
###VISUALISE MODEL OUTPUTS###
library(tidyverse)
library(ggpubr)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
folder_inputs = file.path(folder, 'subscriptions', "data_inputs")
files = list.files(path=folder_inputs, pattern="*.csv")
data <-
do.call("rbind",
lapply(files,
function(x)
read.csv(file.path(folder_inputs, x),
stringsAsFactors = FALSE)))
data$country = factor(data$country, levels=c("CIV",
'MLI',
"SEN",
"KEN",
"TZA",
"UGA"),
labels=c("Cote D'Ivoire",
"Mali",
"Senegal",
"Kenya",
"Tanzania",
"Uganda"
))
data$scenario = factor(data$scenario, levels=c("low",
'baseline',
"high"
),
labels=c("Low",
"Baseline",
"High"
))
data = data[complete.cases(data),]
subscriptions = ggplot(data, aes(x=year, y=penetration, group=country)) +
geom_point(aes(shape=country, color=country), size=1) +
geom_line(aes(color=country)) +
scale_shape_manual(values=c(0, 1, 2, 3, 4, 5)) +
scale_size_manual(values=c(0.1, 0.1, 0.1, 0.1, 0.1)) +
scale_color_manual(values=c("#009E73", "#F0E442","#E69F00", "#56B4E9","#D55E00", "#0072B2")) +
geom_vline(xintercept=2020, linetype="dashed", color = "grey", size=.5) +
scale_x_continuous(expand = c(0, 0.5), limits = c(2010,2030),
breaks = seq(2010,2030,2)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom", legend.title=element_blank()) +
labs(title = "(A) Mobile Subscriptions by Country",
x = NULL, y = "Subscribers (%)") +
guides(shape=guide_legend(ncol=6), colour=guide_legend(ncol=6)) +
facet_grid(~scenario)
####################smartphones
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
data <- read.csv(file.path(folder, '..', 'results', 'regional_annual_demand_technology_options.csv'))
data <- data[(data$confidence == 50),]
names(data)[names(data) == 'GID_0'] <- 'country'
data = data[(
data$strategy == '4G_epc_wireless_baseline_baseline_baseline_baseline_baseline'
),]
data <- select(data, country, scenario, geotype, year,
population, population_with_smartphones)
data$geotype[data$geotype == 'suburban'] <- 'urban'
data = data %>%
group_by(country, scenario, geotype, year) %>%
summarize(population = sum(population),
smartphones = sum(population_with_smartphones))
data$geotype = factor(data$geotype,
levels=c("urban",
"rural"),
labels=c("Urban",
"Rural"))
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
data <- read.csv(file.path(folder, '..', 'results', 'regional_annual_demand_technology_options.csv'))
data <- data[(data$confidence == 50),]
names(data)[names(data) == 'GID_0'] <- 'country'
data = data[(
data$strategy == '4G_epc_wireless_baseline_baseline_baseline_baseline_baseline'
),]
data <- select(data, country, scenario, geotype, year,
population, population_with_smartphones)
data$geotype[data$geotype == 'suburban'] <- 'urban'
data = data %>%
group_by(country, scenario, geotype, year) %>%
summarize(population = sum(population),
smartphones = sum(population_with_smartphones))
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
data <- read.csv(file.path(folder, '..', 'results', 'regional_annual_demand_technology_options.csv'))
data <- data[(data$confidence == 50),]
names(data)[names(data) == 'GID_0'] <- 'country'
data = data[(
data$strategy == '4G_epc_wireless_baseline_baseline_baseline_baseline_baseline'
),]
data <- select(data, country, scenario, geotype, year,
population, population_with_smartphones)
data$geotype[data$geotype == 'suburban'] <- 'urban'
data = data %>%
group_by(country, scenario, geotype, year) %>%
summarize(population = sum(population),
smartphones = sum(population_with_smartphones))
View(data)
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
data <- read.csv(file.path(folder, '..', 'results', 'regional_annual_demand_technology_options.csv'))
data <- data[(data$confidence == 50),]
names(data)[names(data) == 'GID_0'] <- 'country'
data = data[(
data$strategy == '4G_epc_wireless_baseline_baseline_baseline_baseline_baseline'
),]
View(data)
data <- select(data, country, scenario, geotype, year,
population, population_with_smartphones)
View(data)
data$geotype[data$geotype == 'suburban'] <- 'urban'
data %>%
group_by(country, scenario, geotype, year) %>%
summarize(population = sum(population),
smartphones = sum(population_with_smartphones))
View(data)
test = data %>%
group_by(country, scenario, geotype, year) %>%
summarize(population = sum(population),
smartphones = sum(population_with_smartphones))
View(data)
###VISUALISE MODEL OUTPUTS###
library(tidyverse)
library(ggpubr)
####################smartphones
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
data <- read.csv(file.path(folder, '..', 'results', 'regional_annual_demand_technology_options.csv'))
data <- data[(data$confidence == 50),]
names(data)[names(data) == 'GID_0'] <- 'country'
data = data[(
data$strategy == '4G_epc_wireless_baseline_baseline_baseline_baseline_baseline'
),]
data <- select(data, country, scenario, geotype, year,
population, population_with_smartphones)
data$geotype[data$geotype == 'suburban'] <- 'urban'
test = data %>%
group_by(country, scenario, geotype, year) %>%
summarize(population = sum(population),
smartphones = sum(population_with_smartphones))
source('D:/Github/podis/vis/plots.r', echo=TRUE)
